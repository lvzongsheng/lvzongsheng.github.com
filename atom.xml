<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Coco]]></title>
  <link href="http://lvzongsheng.github.io/atom.xml" rel="self"/>
  <link href="http://lvzongsheng.github.io/"/>
  <updated>2014-05-06T19:05:00+08:00</updated>
  <id>http://lvzongsheng.github.io/</id>
  <author>
    <name><![CDATA[Coco]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[有限缓冲区问题]]></title>
    <link href="http://lvzongsheng.github.io/blog/2014/05/06/bounded-buffer/"/>
    <updated>2014-05-06T18:40:00+08:00</updated>
    <id>http://lvzongsheng.github.io/blog/2014/05/06/bounded-buffer</id>
    <content type="html"><![CDATA[<p>有限缓冲区是很基本的同步问题。当给定一个大小固定的缓冲区时，如何同步充值对缓冲区的插入和删除，也是面试或者平时容易遇到的问题。在操作系统中我们通常会采用信号量来实现有限缓冲区问题。<br/><br/></p>

<p>首先我们定义三个信号量，分别为</p>

<pre><code>empty - 表示有限缓冲区可以插入的数据数量，初始化时等于有限缓冲区的大小
full - 表示有限缓冲区中已经插入的数据数量，初始化时等于0
mutex - 简单的理解就是互斥量，每次只允许插入或者删除操作。
根据以上三个信号量，我们可以简单的实现有限缓冲区，代码如下：
//插入操作
empty.acquire();
mutex.acquire();
//do something;
mutex.release();
full.release();

//删除操作
full.acquire();
mutex.acquire();
//do something;
mutex.release();
empty.release();
</code></pre>

<p>而对于信号量，一个重要的原理就是必须保证PV操作的原子性，我们可以通过硬件或者软件的方式来实现。<br/><br/></p>

<!--More-->


<p>接下来我们使用Java来实现有限缓冲区。</p>

<pre><code>//插入操作
public synchronized void insert(Object o){
    while(count==Buffer_Size){
        try{
            wait();
        }catch(InterruptedException e){}
    }
    count++;
    buffer[in] = 0;
    in = (in+1)%Buffer_Size;
    notify();
}

//删除操作
public synchronized Object remove(){
    while(count==0){
        try{
            wait();
        }catch(InterruptedException e){}
    }
    count--;
    Object o = buffer[out];
    out = (out+1)%Buffer_Size;
    notify();
    return o;
}

public class BoundedBuffer implements Buffer{
    private static final int Buffer_Size = 5;
    public in, out, count;
    public Object[] buffer;

    public BoundedBuffer(){
        in = 0;
        out = 0;
        count = 0;
        buffer = new Object[Buffer_Size];
    }

    public synchronized void insert(Object o){}

    public synchronized Oject remove(){}
}

public class Product implement Runnable{
    BoundedBuffer bb;
    public Product(BoundedBuffer bb){
        this.bb = bb;
    }
    public void run(){
        while(true)
            bb.insert(new Integer(3));
    }
}

public class Consumer implement Runnable{
    BoundedBuffer bb;
    public Comsumer(BoundedBuffer bb){
        this.bb = bb;
    }
    public void run(){
        while(true)
            bb.remove();
    }
}

public class Test{
    BoundedBuffer bb = new BoundedBuffer();
    public static void main(String[] args){
        Product p = new Product(bb);
        Consumer c = new Consumer(bb);
        new Thread(p).start();
        new Thread(c).start();
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单例模式的Java实现]]></title>
    <link href="http://lvzongsheng.github.io/blog/2014/05/05/singleton-design-pattern/"/>
    <updated>2014-05-05T21:37:00+08:00</updated>
    <id>http://lvzongsheng.github.io/blog/2014/05/05/singleton-design-pattern</id>
    <content type="html"><![CDATA[<p>说起单例模式，大家应该都不会陌生。下面介绍一种最常见的Java实现方式。</p>

<h2>Eager Initialization</h2>

<p>这个实现方式是我们平时最容易写出来的实现方式。代码如下：</p>

<pre><code>public class EagerSingleton{
  private static volatile EagerSingleton instance = new EagerSingleton();
  private EagerSingleton(){}
  public static EagerSingleton getInstance(){
      return instance;
  }
}
</code></pre>

<p>该方法有一个明显的不足之处在于不管我们是否真的需要使用该实例，该类都会有一个实例存在。</p>

<h2>Lazy Initialization</h2>

<p>为了克服上面的缺陷，我们使用另外一种实现方式。</p>

<pre><code>public class LazySingleton{
  private static volatile LazySingleton instance = null;
  private LazySingleton(){}
  public LazySingleton getInstance(){
      if(instance==null){
        synchronized(LazySingleton.class){
            instance = new LazySingleton();
        }
      }
      return intance;
  }
}
</code></pre>

<p>该方法虽然解决上述问题，但是却引入另外一个问题，那就是该方式并不是线程安全，当有多个线程的时候，会出现多个实例的情况。为了解决这个，我们可以使用双重检验的方式来实现。代码如下：</p>

<pre><code>public class LazySingleton{
  private static volatile LazySingleton instance = null;
  private LazySingleton(){}
  public LazySingleton getInstance(){
      if(instance==null){
        synchronized(LazySingleton.class){
            if(instance==null)
                instance = new LazySingleton();
        }
      }
      return intance;
  }
}
</code></pre>

<p>在该实现中，instance必须要定义成volatile，否则该方法还是会出现多个实例的情况。</p>

<!--More-->


<h2>Static Block Initialization</h2>

<p>如果我们清楚了Java的初始化顺序，则可以使用静态代码块来实现单例模式。</p>

<pre><code>public class StaticBlockSingleton{
    private static final StaticBlockSingleton instance = null;
    private StaticBlockSingleton(){}
    static{
        instance = new StaticBlockSingleton();
    }
    public static StaticBlockSingleton getIntance(){
        return instance;
    }
}
</code></pre>

<p>该实现方式也有一个缺点，就是加入该类中有多个静态变量，而我们只想初始化其中部分变量的时候，我们不得不初始化不需要的变量。</p>

<h2>Bill Pugh Solution</h2>

<p>为了解决上述问题，可以使用静态内部类来实现。因为静态内部类只要在真正使用的时候才会被初始化。代码如下：</p>

<pre><code>public class BillPughSingleton{
    private BillPughSingleton(){}
    private static class LazyHolder{
        public static final BillPughSingleton instance = new BillPughSingleton();
    }
    public static BillPughSingleton getInstance(){
        return LazyHolder.instance;
    }
}
</code></pre>

<h2>Using Enum</h2>

<pre><code>public enum EnumSingleton{
    INSTANCE;
    public void someMethod(String param){}
}
</code></pre>

<h2>Adding readResolver()</h2>

<p>当我们的类需要被序列化的时候，这种情况很容易造成反序列化的类与instance不一致，为了解决这个问题，需要加入readResolver()方法，该方法在readObject()之后被调用，作用是得到单例模式的值。代码如下：</p>

<pre><code>protected Object readResolver(){
    return instance;
}
</code></pre>

<h2>Adding Serial Version Id</h2>

<p>而当序列化之后我们改变了原始的类，这是进行反序列化的时候，是会出现错误的，这个时候就需要制定Serial Version Id.代码如下：</p>

<pre><code>private static final long serialVersionUID = 1L;
</code></pre>

<h2>Conclusion</h2>

<p>所以，结合上述所说，我们可以使用如下代码来更好地实现单例模式。</p>

<pre><code>public class Singleton{
    private static final long serialVersionUID = 1L;
    private Singleton(){}
    private static class SingletonHolder{
        public static final Singleton instance = new Singleton();
    }
    public static Singleton getInstance(){
        return SingletonHolder.intance;
    }
    protected Object readResolver(){
        return getInstace();
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Longest Palindromic Substring]]></title>
    <link href="http://lvzongsheng.github.io/blog/2013/12/05/longest-palindromic-substring/"/>
    <updated>2013-12-05T19:11:00+08:00</updated>
    <id>http://lvzongsheng.github.io/blog/2013/12/05/longest-palindromic-substring</id>
    <content type="html"><![CDATA[<p>最长回文子串是一个比较基础的问题，在面试中也会经常被问题，所以自己也尝试总结一下解决回文子串的方法。可以参见<a href="http://oj.leetcode.com/problems/longest-palindromic-substring/">LeetCode题</a></p>

<h2>方法1：暴力法</h2>

<p>采用暴力法是能够解决最长回文子串问题的，但是所花费的时间是非常巨大的，一般都不能达到要求。<br/></p>

<pre><code>class Solution {
public:
string longestPalindrome(string s) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    int index1 = 0, index2 = 0;
    int begin = 0, end = 0;
    int max = 0;
    for(int i=0; i&lt;s.length();i++){
        for(int j=i;j&lt;s.length();j++){
            index1 = i;
            index2 = j;
            while(index1&lt;=index2){
                if(s.at(index1)!=s.at(index2)){
                    break;
                }else{
                    index1++;
                    index2--;
                }
            }
            if(index1&gt;index2 &amp;&amp; j-i+1&gt;max){
                begin = i;
                end = j;
                max = j-i+1;
            }
        }
    }
    return s.substr(begin,end-begin+1);
}
};
</code></pre>

<p>从上面的代码中可以知道，暴力解法的时间复杂度为O(N<sup>3</sup>),但我们也可以对暴力发进行一定的优化。我们从字符串的最长值向0进行循环，这样可以尽快的找到最长子串。这里就不写代码了。</p>

<!--More-->


<h2>动态规划法</h2>

<p>我们可以采用动态规划的方法来求解。暴力解法之所以时间复杂度高，因为在求解过程中有很多的重复计算，打个简单地比方说：如果P不是回文子串，则aPb这种形式的也不是回文子串，以此类推则可以找到动态规划的算法。<br/>
动态规划的方法如下：</p>

<pre><code>P[i][j] = true 表示i~j这个子串是为回文子串，否则则不是。  
那么我们可知
P[i][j] = true if i&gt;=j
P[i][j] = true if S[i]==S[j] and P[i+1][j-1] = true
else P[i][j] = false
</code></pre>

<p>使用动态规划的方法的时间复杂度是O(N<sup>2</sup>)其动态规划的实现方法如下：<br/></p>

<pre><code>class Solution {
public:
string longestPalindrome(string s) {
    // IMPORTANT: Please reset any member data you declared, as
    // the same Solution instance will be reused for each test case.
    bool isPalindrome[s.length()][s.length()];
    for(int i=0;i&lt;s.length();i++){
        for(int j=0;j&lt;s.length()-i;j++){
            if(j==j+i){
                isPalindrome[j][j+i] = true;
            }else{
                if(s[j]==s[j+i]){
                    if(i&gt;1)
                        if(isPalindrome[j+1][j+i-1])
                            isPalindrome[j][j+i] = true;
                        else
                            isPalindrome[j][j+i] = false;
                    else
                        isPalindrome[j][j+i] = true;
                }else{
                    isPalindrome[j][j+i] = false;
                }
            }
        }
    }

    for(int i=s.length()-1; i&gt;=0; i--){
        for(int j=0;j&lt;s.length()-i;j++){
            if(isPalindrome[j][j+i])
                return s.substr(j,i+1);
        }

    }
}
};
</code></pre>

<h2>Manacher算法</h2>

<p>虽然动态规划的方法性能得到了提高，但还是在平方级上的，而使用Manacher算法，时间复杂度为O(N)。大家可以<a href="http://www.cnblogs.com/biyeymyhjob/archive/2012/10/04/2711527.html">参考该博文</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache, Tomcat, JBoss和Weblogic比较]]></title>
    <link href="http://lvzongsheng.github.io/blog/2013/11/29/servers/"/>
    <updated>2013-11-29T18:49:00+08:00</updated>
    <id>http://lvzongsheng.github.io/blog/2013/11/29/servers</id>
    <content type="html"><![CDATA[<p>每当提起Apache等，我相信有不少人也很难说清楚它们各自属于什么，今天抽空自己也整理一下。</p>

<h2>Apache</h2>

<p>Apache属于HTTP服务器，我们所编写的静态页面可以运行在Apache服务器上。这个比较简单，也很通用。</p>

<h2>Tomcat</h2>

<p>Tomcat准确地说是Web容器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。当配置正确时，Apache 为HTML页面服务，而Tomcat 实际上运行JSP 页面和Servlet。另外，Tomcat和IIS、Apache等Web服务器一样，具有处理HTML页面的功能，另外它还是一个Servlet和JSP容器，独立的Servlet容器是Tomcat的默认模式。不过，Tomcat处理静态HTML的能力不如Apache服务器。所以在商业把Apache和tomcat进行结合使用是比较受欢迎的，大家可以点这里了解写<a href="http://www.ibm.com/developerworks/cn/opensource/os-lo-apache-tomcat/">Apache和tomcat的结合方式</a></p>

<h2>JBoss</h2>

<p>JBoss是应用服务器，是一个基于J2EE的开放源代码的应用服务器。</p>

<h2>Weblogic</h2>

<p>是美国bea公司出品的一个application server确切的说是一个基于Javaee架构的中间件，BEA WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[企业级配置文件等的管理]]></title>
    <link href="http://lvzongsheng.github.io/blog/2013/11/28/property-management/"/>
    <updated>2013-11-28T21:15:00+08:00</updated>
    <id>http://lvzongsheng.github.io/blog/2013/11/28/property-management</id>
    <content type="html"><![CDATA[<p>谈到企业级配置文件的管理，我们先谈谈在本文中涉及的企业级配置文件的含义。众所周知，在工程项目中，我们会使用到各种各样的配置文件，以方便管理在工程项目中所用到的各种信息。除了在工程项目中，各种应用也会有自己的配置文件和用户配置文件。可以说配置文件是无处不在的。但这里我们不谈以上的配置，而把重点集中到计算机IT在不同的开发环境中如何更好地管理其配置文件。</p>

<h2>IT企业开发测试环境</h2>

<p>一般来说，IT的开发会涉及到三个环境：<br/>
1. <strong>DEV</strong>（Development）<br/>
2. <strong>UAT</strong>（User Acceptance Test）<br/>
3. <strong>PROD</strong>（Production）<br/>
这个三个环境。从字面上理解，DEV环境是开发人员的开发环境，这个环境对开发人员来说权限是比较高的。而UAT环境已经是用户接受的测试环境，这个环境开发人员的权限较小，几乎没有写权限，需要通过专门的部署才能实现。而PROD是真正的产品环境，开发没有权限，开发的代码等需要专门的部署，一旦在PROD环境上发生错误，都很有可能对客户等造成极坏的影响。所以在UAT测试是最后的质量关，一般情况下会进行两轮以上的UAT测试，最后一轮被称之为Final UAT。</p>

<h2>多个开发测试环境造成的问题</h2>

<p>正因为不同的开发环境并不能完全保持一致，不同环境的测试所需的信息也是不一致的，这就会未来留下一定的隐患。最为突出的是不同环境下的文件发生串位。打一个我真实遇到过得例子。<br/>
在我们的产品需求中我们需要往客户要求的FTP中发送文件，为了能在不同的环境下进行测试，PROD和DEV，UAT所需的FTP账号是不同的。我们为了以后修改方便，把这些账号信息作为配置文件放在CMS系统中。但又一次开发人员不PROD的code给全部Refresh到DEV上，这直接造成了DEV的配置文件和PROD的配置是一样的，所以发生了一次很严重的产品事故。
其实原因很简单，就是一次人为不注意引起的，但从IT人眼中，人是不可能避免犯错的。所以如何避免环境不一致而存在的客观隐患，则变的尤为重要。</p>

<!--More-->


<h2>解决方案</h2>

<h3>1 不同环境的所有配置应统一成一份</h3>

<p>统一成一份的好处是不会发生硬拷贝导致的错误。所以的配置分环境统一成一份文件，然后工程根据不同得运行环境调用不同的配置信息。</p>

<h3>2 不同环境的配置文件名应含环境名</h3>

<p>不同环境的配置文件名含有环境名也能避免人为拷贝而造成的损失，这种做法也需要的Code中判断环境从而选择该环境下得配置文件进行读取。相比第一种解决方案，第二种方案更为清晰，但是维护成本要高一点，毕竟不同环境都要维护一份。</p>

<h3>3 直接Hard Code在代码中</h3>

<p>这个方案可能在很多人看来是不可取的，因为维护起来比较不方便，但我们也要考虑一个问题，配置文件的维护也是高成本的，而且相比配置文件，Hard Code在代码中是一种更为安全的策略。这种解决方案适合在这个配置信息几乎不改变的情况下或者是该文件的安全性较高，并且使用地方很小的情况下。</p>

<h3>4 进行权限管理</h3>

<p>如果想从本质上解决这个问题的，可以对各个环境进行权限管理，比如说DEV环境不可能调用到PROD的任何资源，这也在根本上杜绝了这些问题。但是现实中为了测试，或者为了方便，总是会打破这个规则，这也将是很棘手的问题。在这个问题我们可以建立Password Matrix里对账号等进行管理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ETL and Pentaho Data Integraton]]></title>
    <link href="http://lvzongsheng.github.io/blog/2013/11/26/etl-and-pdi/"/>
    <updated>2013-11-26T20:30:00+08:00</updated>
    <id>http://lvzongsheng.github.io/blog/2013/11/26/etl-and-pdi</id>
    <content type="html"><![CDATA[<p>ETL全称是Extract，Transform，Load，即数据的抽取，转化和转载。ETL在建立数据仓库中得作用十分巨大。简单来说，ETL就是把多个数据源的数据抽取出来进行一定的转化，最后把数据存入数据仓库。在实际的ETL过程中，T过程是最为重要的，其中涉及到数据的清洗，数据的转化，数据的归并等多种多样的操作。<br/>
目前完全靠代码来实现ETL过程极为复杂，我们可以通过一些开源的工具来帮助我们设计ETL过程。本文讲介绍下Pentaho Data Integration这个ETL工具。具体请参考<a href="http://pentaho.com/">PDI</a><br/>
下面是一份关于ETL和PDI相关的Presentation，可以作为参考。</p>

<script async class="speakerdeck-embed" data-id="ce029c0038c301311e402ef68c3b02b3" data-ratio="1.33333333333333" src="http://lvzongsheng.github.io//speakerdeck.com/assets/embed.js"></script>


<p>下载请点击<a href="http://cocodocuments.u.qiniudn.com/ETL.pptx">Here</a></p>

<!--More-->


<p>除了一些理论外，自己制作一个小的Demo来展示PDI的基本功能。</p>

<script async class="speakerdeck-embed" data-id="3756d2c038d101311e402ef68c3b02b3" data-ratio="1.33333333333333" src="http://lvzongsheng.github.io//speakerdeck.com/assets/embed.js"></script>


<p>下载PDI Demo文件请点击<a href="http://cocodocuments.u.qiniudn.com/Demo.ktr">Demo for Transformation</a>和<a href="http://cocodocuments.u.qiniudn.com/ETL.pptx">Demo for Job</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正则表达式]]></title>
    <link href="http://lvzongsheng.github.io/blog/2013/09/22/regular-expression/"/>
    <updated>2013-09-22T07:14:00+08:00</updated>
    <id>http://lvzongsheng.github.io/blog/2013/09/22/regular-expression</id>
    <content type="html"><![CDATA[<h2>正则表达式</h2>

<p>在对文本进行分析处理的时候，少不了会使用正则表达式进行匹配和替换。本文是对自己在学习正则表达式的一些总结。<br/>
正则表达式定义：正则表达式是描述一组字符串的特征的模式，用来匹配特定的字符串。<br/>
在介绍正则表达式之前，说几个在线的测试正则表达式的工具：<br/>
 + <a href="http://www.regexpal.com">Regexpal</a><br/>
它是一个在线的用Javascript实现的正则表达式处理器。它不是正则表达式的完整实现，因此功能并不完整，优点是简洁易用，易于上手。<br/>
 + <a href="http://gskinner.com/RegExr">RegExr</a><br/>
 RegExr内嵌在Flex3中且依赖于ActionScript正则表达式引擎，其使用的正则表达式与Javascript相似。
 <!--more--></p>

<h3>简单的模式匹配</h3>

<pre><code>匹配字符串字面值 eg: abc 匹配abcde中的abc
匹配数字 \d 或者 [0-9]
匹配非数字字符 \D 或者 [^0-9] 或者 [^\d]
匹配单词和非单词字符 \w 或者 [_a-zA-Z0-9]
// \D和\w的区别\D会匹配空格、标点符号（引号、连字符、反斜杠、方括号）等字符，而\w不会，它只匹配字母、数字和下划线。
匹配非单词字符 \W
匹配空白符 \a 或者[ \t\n\r] 包括空格、制表符、换行符、回车符
</code></pre>

<p>在正则表达式中，有大小写的匹配符一般都是相反的作用，也可以使用^来进行取反。</p>

<h3>边界</h3>

<pre><code>行的起始和结束 ^ $
单词边界与非单词边界 \b \B
\\ \b是零宽度断言，表面山会匹配空格或者行起始，但实际上它匹配的是个零宽度的不存在的东西。
使用元字符字面值 \Q \E eg:\Q$\E
</code></pre>

<p>零宽度断言是指匹配宽度为0，满足一定条件的断言。零宽度断言用于查找在某些内容（但不包括这些内容）之前或者之后的东西。所以像\b ^ $都是零宽度断言符。</p>

<h3>选择、分组和后向引用</h3>

<p>选择使用的()中间用|分割，eg:(the|The|THE),值得注意的是使用()也是一次分组。<br/>
捕获分组用的是()，可以通过后向引用重用捕获的内容，\1.<br/>
非捕获分组用的是(?:)<br/>
在实际的字符串匹配中，选择，分组和后向引用是非常常见的功能，所以建议大家好好学习并掌握。</p>

<h3>量词</h3>

<p>量词本身没有什么难度，但在实际的应用中还是会存在一下难度，其中很重要的是贪心与懒惰匹配。
量词自身是贪心的，贪心的量词会先尝试匹配整个字符串，如果失败则退一个字符后再次尝试，这个就是正则匹配回溯的过程，所以整个运算量比较大。<br/>
而懒惰的量词采用了另外一个策略，它从目标位置开始匹配，每次检查字符串的一个字符。懒惰量词需要在普通量词后面加一个？<br/>
占有量词会覆盖整个目标然后尝试寻找匹配内容，但它只尝试一次，不会回溯。占有量词是在普通量词后面添加一个+<br/></p>

<pre><code>举个简单的例子：“simple sample”
贪婪模式 s.+e 匹配simple sample
懒惰模式 s.+?e 匹配simple
占有模式 s.++e 匹配失败
</code></pre>

<h3>环视</h3>

<p>环视是一种非捕获分组，它根据某个模式之前或之后的内容匹配其他模式，环视也称为零宽度断言。<br/>
环视包括正前瞻，反前瞻，正后顾，反后顾。</p>

<pre><code>正前瞻：eg (?i)ancyent (?=marinere)
反前瞻：eg (?i)ancyent (?!marinere)
正后顾：eg (?i)(?&lt;=ancyent) marinere
反后顾：eg (?i)(?&lt;!ancyent) marinere
</code></pre>

<p>本文提到的都是正则表达式中最常用，最重要的几个点，在实际使用中会衍生出各种复杂的表达式，归根到底正则表达式是一种组合的艺术，剖析来看没什么神奇之处，一旦组合到一起，便是让人眼花缭乱。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二叉树的遍历]]></title>
    <link href="http://lvzongsheng.github.io/blog/2013/09/06/tree-traversals/"/>
    <updated>2013-09-06T09:39:00+08:00</updated>
    <id>http://lvzongsheng.github.io/blog/2013/09/06/tree-traversals</id>
    <content type="html"><![CDATA[<h2>1 二叉树数据结构</h2>

<p>二叉树数据结构一般有两种，数组和链式结构。</p>

<h3>1.1 数组结构</h3>

<p>我们一般是把数组下标为1的元素作为树的根节点，如果已知一个父节点为n，然后其左孩子为2n，右孩子为2n+1.<br/>优点：对于完全二叉树而言，数组结构简单而且最节省空间。<br/>缺点：对于一般的二叉树而言，比较浪费空间，同时数组结构的二叉树做插入和删除操作时，移动的节点较多。<br/>
关于更多的顺序存储的知识，请<a href="http://student.zjzk.cn/course_ware/data_structure/web/shu/shu6.2.3.1.htm">参考</a>
在实际的编程中，如果更多的情况是进行树的遍历并且树接近完全二叉树，则使用数组结构是比较合适的。</p>

<!--more-->


<h3>1.2 链式结构</h3>

<p>链式结构是最一般化的树形结构的表示方法，其优点是可以表示最一般的树形结构，同时对树的查找，插入和删除代价小。缺点是实现难度稍微负责点，容易出错。</p>

<h2>2 二叉树的遍历</h2>

<p>树的遍历最常用是树的前序，中序，后序和层序遍历。在一般的算法题中，就是根据已经给定的两种遍历结果，求第三种遍历结果。只要掌握了各种遍历方法和树的表示形式，应该解题会比较通畅。<br/>
关于上述题型的总结，可以参见<a href="http://biaobiaoqi.me/blog/2013/04/27/travsal-binary-tree/">二叉树的遍历（递归、非递归）分析</a>和<a href="http://biaobiaoqi.me/blog/2013/04/27/pat1020-pat1043-rebuild-binary-tree/">根据前中后序和层序重建二叉树</a><br/>这里总结一下二叉树遍历最一般使用的STL。
在前中后序遍历中，最为常用的还是递归的实现，一般会使用stack或者queue。但在层序遍历中，我们使用的queue，而stack不能实现层序遍历。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress_setup]]></title>
    <link href="http://lvzongsheng.github.io/blog/2013/08/28/octopress-setup/"/>
    <updated>2013-08-28T23:34:00+08:00</updated>
    <id>http://lvzongsheng.github.io/blog/2013/08/28/octopress-setup</id>
    <content type="html"><![CDATA[<p>接触Github有一段时间了，知道Octopress也有一段时间，只是一直没有把它们整合，搭建一个自己的博客。最近自己过得过于混乱，想有个自己的博客来记录生活上的点点滴滴，所以就动手了……</p>

<h2>1 Octopress的安装</h2>

<p>非常感谢室友biaobiaoqi的分享，使自己在Octopress的安装上没有走弯路。<br/>
这里是他的博文链接，对于想安装和定制Octopress的童鞋非常有指导作用。<br/>
<a href="http://biaobiaoqi.me/blog/2013/03/21/building-octopress-in-github-mac/">在github上搭建octopress博客 Mac</a>和<a href="http://biaobiaoqi.me/blog/2013/07/10/decorate-octopress/">定制Octopress</a><br/>
朋友可以参考以上博文来安装和定制Octopress</p>

<!-- more -->


<p>下面是自己经常用到的Octopress及github的命令</p>

<pre><code>#创建一篇博文
rake new_post["post title"] #octopress 将在工作目录的 source/_post/目录下生成相应的 markdown 文件。然后可以使用 mou 工具去修改编辑内容。

#生成预览
rake preview #可以通过 localhost:4000 在本机实时观察最新的编辑效果。

#在线发布
rake deploy #完成编辑后，可以将最新的内容部署到 github 上去。成功后，即可在线访问。

#向 github 提交源文件更新
git add -A
git commit -m "提交内容"
git push origin source //source 是github上的一个分支
</code></pre>

<p>Octopress可以Mou来进行快速和可视化编辑，下面是Mou最常用的语法。</p>

<ul>
<li>加粗和斜体 (单词前后包围**或者__)</li>
<li>有序的列表 （“1.”+space）</li>
<li>无顺序的列表 （“*”+space或者“-”+space）</li>
<li>断行 （2或者更多的空格）</li>
<li>内嵌的代码 （tab或者4个空格）</li>
<li>划掉单词 （单词前后包围~~）
更多信息，请参见<a href="http://mouapp.com">Mou</a></li>
</ul>


<h2>2 Octopress的定制</h2>

<h3>2.1 图片相册</h3>

<p>在个人主页中，我针对自己对摄影的爱好，专门配置了图片相册。我采用的是<a href="http://fancyapps.com/fancybox/">FancyBox</a>的插件。同时也有人根据FancyBox定制了Octopress的第三方<a href="http://tritarget.org/blog/2012/05/07/integrating-photos-into-octopress-using-fancybox-and-plugin/">插件</a></p>

<pre><code>1 Download the fancybox source to /source/fancybox
2 Add fancybox jquery to _include/custom/head.html
&lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.min.js"&gt;&lt;/script&gt;
&lt;link rel="stylesheet" href="http://lvzongsheng.github.io/fancybox/jquery.fancybox.css" type="text/css" media="screen" /&gt;
&lt;script type="text/javascript" src="http://lvzongsheng.github.io/fancybox/jquery.fancybox.pack.js"&gt;&lt;/script&gt;

&lt;script&gt;
$(document).ready(function() {
    $('.fancybox').fancybox();
});
&lt;/script&gt;
3 Add html code in your own page like this:
&lt;a href="http://lvzongsheng.github.io/images/about/pic2.jpg" class="fancybox" rel="gallery" title="摄于杭州钱塘江大桥"&gt;&lt;img src="http://lvzongsheng.github.io/images/about/pic2_m.jpg" /&gt;&lt;/a&gt;
&lt;a href="http://lvzongsheng.github.io/images/about/pic4.jpg" class="fancybox" rel="gallery" title="摄于杭州云栖竹径"&gt;&lt;img src="http://lvzongsheng.github.io/images/about/pic4_m.jpg" /&gt;&lt;/a&gt;
&lt;a href="http://lvzongsheng.github.io/images/about/pic5.jpg" class="fancybox" rel="gallery" title="摄于绍兴孔乙己酒家"&gt;&lt;img src="http://lvzongsheng.github.io/images/about/pic5_m.jpg" /&gt;&lt;/a&gt;
&lt;a href="http://lvzongsheng.github.io/images/about/pic4.jpg" class="fancybox" rel="gallery" title="摄于杭州云栖竹径"&gt;&lt;img src="http://lvzongsheng.github.io/images/about/pic4_m.jpg" /&gt;&lt;/a&gt;
</code></pre>

<p>FancyBox除了图片之外，还支持视频等其他多媒体形式，要得到更多信息，可以参见官网。</p>

<h3>2.2 搜索的优化</h3>

<p>为了使搜索引擎更好的找到我们的文章，我参照<a href="http://dinever.com/blog/2013/01/23/zhuan-zai-fan-yi-octopresszhong-de-seo-youhua/">Octopress中的搜索引擎优化</a>为每篇元素添加meta元素，优化搜索
当你使用rake new_post[title]生成文章时，layout、title、date、comments这些关键属性会自动生成，但如果你再为它增加两个关键词keywords和description，Octopress便会在rake generate时自动为这篇文章加上meta元素。</p>

<pre><code>layout: post
title: "octopress_setup"
date: 2013-08-28 23:34
comments: true
keywords: Octopress
description: Octopress 安装 配置
</code></pre>

<p>那么在生产页面时，就会有</p>

<pre><code>&lt;meta name="description" content="Octopress 安装 配置"&gt;
&lt;meta name="keywords" content="Octopress"&gt;
</code></pre>

<p>现在我们还要为首页添加meta标签。首先在_config.yml中加入keywords和description关键字</p>

<pre><code>title: Coco
subtitle: A blog for Recording.
author: Coco
simple_search: http://google.com/search
description: cocolighter algorithms data structure computer
keywords: cocolighter algorithms data structure computer
</code></pre>

<p>然后在source/_includes/head.html做如下修改</p>

<pre><code>{\% if page.keywords \%}&lt;meta name="keywords" content="Octopress"&gt;{\% else if site.keywords\%}&lt;meta name="keywords" content="cocolighter algorithms data structure computer"&gt;{\% endif \%}
</code></pre>

<h3>2.3 使用google自定义搜索实现站内搜索</h3>

<p>虽有octopress默认的也是使用的google搜索，但是搜索效果很不友好，所以这里采用了Goolge的自定义搜索来实现站内搜索。<br/>
首先我们需要去注册Google的账号，并创建<a href="https://www.google.com/cse/">自定义搜索引擎</a>。<br/>
在配置好搜素引擎后，获取搜索结果的代码，这里没有使用获取搜索框的代码。<br/>
现在已经搞定了Google自定义搜索引擎，接下来我们需要对Octopress做一些修改。<br/>
1 _config.yml</p>

<pre><code>将http://google.com/search 改成/search
</code></pre>

<p>2 创建新的search页面</p>

<pre><code>rake new_page["search"]
</code></pre>

<p>3 修改source/_include/navigation.html</p>

<pre><code>去掉&lt;input type="hidden" name="q" value="site:lvzongsheng.github.io" /&gt;
</code></pre>

<p>4 在新建的search页面中加入Google自定义引擎中获取的代码</p>

<pre><code>&lt;div&gt;
    插入Google自定义引擎的代码
&lt;/div&gt;
</code></pre>

<p>最后推荐一个<a href="http://fis.io/ajax-google-custom-search-engine.html">博文</a>，它介绍使用ajax来更好的实现Google的自定义搜索引擎</p>
]]></content>
  </entry>
  
</feed>
