---
layout: post
title: "企业级配置文件等的管理"
date: 2013-11-28 21:15
comments: true
categories: 
---
谈到企业级配置文件的管理，我们先谈谈在本文中涉及的企业级配置文件的含义。众所周知，在工程项目中，我们会使用到各种各样的配置文件，以方便管理在工程项目中所用到的各种信息。除了在工程项目中，各种应用也会有自己的配置文件和用户配置文件。可以说配置文件是无处不在的。但这里我们不谈以上的配置，而把重点集中到计算机IT在不同的开发环境中如何更好地管理其配置文件。
##IT企业开发测试环境
一般来说，IT的开发会涉及到三个环境：<br/>
1. **DEV**（Development）<br/>
2. **UAT**（User Acceptance Test）<br/>
3. **PROD**（Production）<br/>
这个三个环境。从字面上理解，DEV环境是开发人员的开发环境，这个环境对开发人员来说权限是比较高的。而UAT环境已经是用户接受的测试环境，这个环境开发人员的权限较小，几乎没有写权限，需要通过专门的部署才能实现。而PROD是真正的产品环境，开发没有权限，开发的代码等需要专门的部署，一旦在PROD环境上发生错误，都很有可能对客户等造成极坏的影响。所以在UAT测试是最后的质量关，一般情况下会进行两轮以上的UAT测试，最后一轮被称之为Final UAT。
##多个开发测试环境造成的问题
正因为不同的开发环境并不能完全保持一致，不同环境的测试所需的信息也是不一致的，这就会未来留下一定的隐患。最为突出的是不同环境下的文件发生串位。打一个我真实遇到过得例子。<br/>
在我们的产品需求中我们需要往客户要求的FTP中发送文件，为了能在不同的环境下进行测试，PROD和DEV，UAT所需的FTP账号是不同的。我们为了以后修改方便，把这些账号信息作为配置文件放在CMS系统中。但又一次开发人员不PROD的code给全部Refresh到DEV上，这直接造成了DEV的配置文件和PROD的配置是一样的，所以发生了一次很严重的产品事故。
其实原因很简单，就是一次人为不注意引起的，但从IT人眼中，人是不可能避免犯错的。所以如何避免环境不一致而存在的客观隐患，则变的尤为重要。
<!--More-->
##解决方案
### 1 不同环境的所有配置应统一成一份
统一成一份的好处是不会发生硬拷贝导致的错误。所以的配置分环境统一成一份文件，然后工程根据不同得运行环境调用不同的配置信息。
### 2 不同环境的配置文件名应含环境名
不同环境的配置文件名含有环境名也能避免人为拷贝而造成的损失，这种做法也需要的Code中判断环境从而选择该环境下得配置文件进行读取。相比第一种解决方案，第二种方案更为清晰，但是维护成本要高一点，毕竟不同环境都要维护一份。
### 3 直接Hard Code在代码中
这个方案可能在很多人看来是不可取的，因为维护起来比较不方便，但我们也要考虑一个问题，配置文件的维护也是高成本的，而且相比配置文件，Hard Code在代码中是一种更为安全的策略。这种解决方案适合在这个配置信息几乎不改变的情况下或者是该文件的安全性较高，并且使用地方很小的情况下。
### 4 进行权限管理
如果想从本质上解决这个问题的，可以对各个环境进行权限管理，比如说DEV环境不可能调用到PROD的任何资源，这也在根本上杜绝了这些问题。但是现实中为了测试，或者为了方便，总是会打破这个规则，这也将是很棘手的问题。在这个问题我们可以建立Password Matrix里对账号等进行管理。