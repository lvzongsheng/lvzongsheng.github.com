---
layout: post
title: "正则表达式"
date: 2013-09-22 07:14
comments: true
keywords: 正则表达式 分组 环视 贪婪 匹配
description: 正则表达式 分组 环视 贪婪 匹配
categories: 
---
##正则表达式
在对文本进行分析处理的时候，少不了会使用正则表达式进行匹配和替换。本文是对自己在学习正则表达式的一些总结。<br/>
正则表达式定义：正则表达式是描述一组字符串的特征的模式，用来匹配特定的字符串。<br/>
在介绍正则表达式之前，说几个在线的测试正则表达式的工具：<br/>
 + [Regexpal](http://www.regexpal.com)<br/>
它是一个在线的用Javascript实现的正则表达式处理器。它不是正则表达式的完整实现，因此功能并不完整，优点是简洁易用，易于上手。<br/>
 + [RegExr](http://gskinner.com/RegExr)<br/>
 RegExr内嵌在Flex3中且依赖于ActionScript正则表达式引擎，其使用的正则表达式与Javascript相似。
 <!--more-->
###简单的模式匹配
	匹配字符串字面值 eg: abc 匹配abcde中的abc
	匹配数字 \d 或者 [0-9]
	匹配非数字字符 \D 或者 [^0-9] 或者 [^\d]
	匹配单词和非单词字符 \w 或者 [_a-zA-Z0-9]
	// \D和\w的区别\D会匹配空格、标点符号（引号、连字符、反斜杠、方括号）等字符，而\w不会，它只匹配字母、数字和下划线。
	匹配非单词字符 \W
	匹配空白符 \a 或者[ \t\n\r] 包括空格、制表符、换行符、回车符
在正则表达式中，有大小写的匹配符一般都是相反的作用，也可以使用^来进行取反。
###边界
	行的起始和结束 ^ $
	单词边界与非单词边界 \b \B
	\\ \b是零宽度断言，表面山会匹配空格或者行起始，但实际上它匹配的是个零宽度的不存在的东西。
	使用元字符字面值 \Q \E eg:\Q$\E
零宽度断言是指匹配宽度为0，满足一定条件的断言。零宽度断言用于查找在某些内容（但不包括这些内容）之前或者之后的东西。所以像\b ^ $都是零宽度断言符。
###选择、分组和后向引用
选择使用的()中间用|分割，eg:(the|The|THE),值得注意的是使用()也是一次分组。<br/>
捕获分组用的是()，可以通过后向引用重用捕获的内容，\1.<br/>
非捕获分组用的是(?:)<br/>
在实际的字符串匹配中，选择，分组和后向引用是非常常见的功能，所以建议大家好好学习并掌握。
###量词
量词本身没有什么难度，但在实际的应用中还是会存在一下难度，其中很重要的是贪心与懒惰匹配。
量词自身是贪心的，贪心的量词会先尝试匹配整个字符串，如果失败则退一个字符后再次尝试，这个就是正则匹配回溯的过程，所以整个运算量比较大。<br/>
而懒惰的量词采用了另外一个策略，它从目标位置开始匹配，每次检查字符串的一个字符。懒惰量词需要在普通量词后面加一个？<br/>
占有量词会覆盖整个目标然后尝试寻找匹配内容，但它只尝试一次，不会回溯。占有量词是在普通量词后面添加一个+<br/>
	举个简单的例子：“simple sample”
	贪婪模式 s.+e 匹配simple sample
	懒惰模式 s.+?e 匹配simple
	占有模式 s.++e 匹配失败
###环视
环视是一种非捕获分组，它根据某个模式之前或之后的内容匹配其他模式，环视也称为零宽度断言。<br/>
环视包括正前瞻，反前瞻，正后顾，反后顾。
	正前瞻：eg (?i)ancyent (?=marinere)
	反前瞻：eg (?i)ancyent (?!marinere)
	正后顾：eg (?i)(?<=ancyent) marinere
	反后顾：eg (?i)(?<!ancyent) marinere
本文提到的都是正则表达式中最常用，最重要的几个点，在实际使用中会衍生出各种复杂的表达式，归根到底正则表达式是一种组合的艺术，剖析来看没什么神奇之处，一旦组合到一起，便是让人眼花缭乱。
	